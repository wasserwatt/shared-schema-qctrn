
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  password: 'password',
  companyId: 'companyId',
  companyBranchId: 'companyBranchId',
  departmentId: 'departmentId',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  companyName: 'companyName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.CompanyBranchScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  companyBranchName: 'companyBranchName'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  departmentName: 'departmentName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.CourseScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  pdfUrl: 'pdfUrl',
  videoUrl: 'videoUrl',
  typeId: 'typeId',
  template: 'template',
  departmentId: 'departmentId',
  processId: 'processId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy',
  deletedBy: 'deletedBy',
  isDeleted: 'isDeleted'
};

exports.Prisma.UserCourseCompletionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  username: 'username',
  courseId: 'courseId',
  examId: 'examId',
  processId: 'processId',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CourseTypeScalarFieldEnum = {
  id: 'id',
  title: 'title'
};

exports.Prisma.EnrollmentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  courseId: 'courseId',
  progress: 'progress',
  completed: 'completed',
  isDownloaded: 'isDownloaded'
};

exports.Prisma.ExamScalarFieldEnum = {
  id: 'id',
  title: 'title',
  departmentId: 'departmentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  courseId: 'courseId',
  description: 'description',
  deleted: 'deleted'
};

exports.Prisma.QuestionScalarFieldEnum = {
  id: 'id',
  examId: 'examId',
  text: 'text',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deleted: 'deleted'
};

exports.Prisma.ChoiceScalarFieldEnum = {
  id: 'id',
  questionId: 'questionId',
  text: 'text',
  correct: 'correct',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deleted: 'deleted'
};

exports.Prisma.ExamAttemptScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  examId: 'examId',
  startedAt: 'startedAt',
  endedAt: 'endedAt',
  grade: 'grade',
  isPassed: 'isPassed'
};

exports.Prisma.UserAnswerScalarFieldEnum = {
  id: 'id',
  examAttemptId: 'examAttemptId',
  questionId: 'questionId',
  selectedChoiceId: 'selectedChoiceId',
  isCorrect: 'isCorrect',
  createdAt: 'createdAt'
};

exports.Prisma.OplDocumentScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  fileName: 'fileName',
  fileType: 'fileType',
  filePath: 'filePath',
  template: 'template',
  createdAt: 'createdAt',
  uploadedBy: 'uploadedBy',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.FileScalarFieldEnum = {
  id: 'id',
  originalName: 'originalName',
  storedName: 'storedName',
  fileType: 'fileType',
  fileSize: 'fileSize',
  filePath: 'filePath',
  uploadDate: 'uploadDate',
  userId: 'userId',
  courseId: 'courseId'
};

exports.Prisma.ProcessScalarFieldEnum = {
  id: 'id',
  pc_bluePrintNo: 'pc_bluePrintNo',
  pc_imageBluePrint: 'pc_imageBluePrint',
  pc_totalProcess: 'pc_totalProcess',
  pc_userId: 'pc_userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ProcessDetailScalarFieldEnum = {
  id: 'id',
  pc_bluePrintNo: 'pc_bluePrintNo',
  pc_processTitle: 'pc_processTitle',
  pc_amountDay: 'pc_amountDay',
  pc_reasonType: 'pc_reasonType'
};

exports.Prisma.ProcessBranchScalarFieldEnum = {
  id: 'id',
  pc_processDetailId: 'pc_processDetailId',
  pc_remark: 'pc_remark'
};

exports.Prisma.ProcessMatScalarFieldEnum = {
  id: 'id',
  pc_processDetailId: 'pc_processDetailId',
  pc_matId: 'pc_matId',
  pc_matamount: 'pc_matamount'
};

exports.Prisma.ProcessBomScalarFieldEnum = {
  id: 'id',
  pc_processDetailId: 'pc_processDetailId',
  pc_bomId: 'pc_bomId',
  pc_bomamount: 'pc_bomamount'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  pj_bluePrintNo: 'pj_bluePrintNo',
  pj_serialNumber: 'pj_serialNumber',
  pj_projectName: 'pj_projectName',
  pj_startDate: 'pj_startDate',
  pj_endDate: 'pj_endDate',
  pj_amountProduct: 'pj_amountProduct',
  pj_totalDay: 'pj_totalDay',
  pj_imageProduct: 'pj_imageProduct',
  pj_remark: 'pj_remark',
  pj_status: 'pj_status',
  pj_type: 'pj_type',
  pj_userId: 'pj_userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ProjectDetailScalarFieldEnum = {
  id: 'id',
  pj_projectId: 'pj_projectId',
  pj_bluePrintNo: 'pj_bluePrintNo',
  pj_serialNumber: 'pj_serialNumber',
  pj_processTitle: 'pj_processTitle',
  pj_amountDay: 'pj_amountDay',
  pj_reasonType: 'pj_reasonType',
  pj_statusPc: 'pj_statusPc'
};

exports.Prisma.ProjectBranchScalarFieldEnum = {
  id: 'id',
  pj_projectDetailId: 'pj_projectDetailId',
  pj_remark: 'pj_remark'
};

exports.Prisma.ProjectMatScalarFieldEnum = {
  id: 'id',
  pj_projectDetailId: 'pj_projectDetailId',
  pj_matId: 'pj_matId',
  pj_matamount: 'pj_matamount',
  pj_matTatal: 'pj_matTatal'
};

exports.Prisma.ProjectBomScalarFieldEnum = {
  id: 'id',
  pj_projectDetailId: 'pj_projectDetailId',
  pj_bomId: 'pj_bomId',
  pj_bomamount: 'pj_bomamount',
  pj_bomTatal: 'pj_bomTatal'
};

exports.Prisma.ProjectResUserScalarFieldEnum = {
  id: 'id',
  pj_projectDetailId: 'pj_projectDetailId',
  pj_userId: 'pj_userId'
};

exports.Prisma.CompanyHourScalarFieldEnum = {
  id: 'id',
  hour: 'hour',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StockScalarFieldEnum = {
  id: 'id',
  stockId: 'stockId',
  stockName: 'stockName',
  stockQuantity: 'stockQuantity',
  stockType: 'stockType',
  stockTypeId: 'stockTypeId',
  stockImage: 'stockImage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ReasonStockNGScalarFieldEnum = {
  id: 'id',
  reasonstockName: 'reasonstockName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ReasonTypeNGScalarFieldEnum = {
  id: 'id',
  reasontypeName: 'reasontypeName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ReasonDetailScalarFieldEnum = {
  id: 'id',
  reasonTypeId: 'reasonTypeId',
  reasondetailName: 'reasondetailName'
};

exports.Prisma.ReportScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  blueprintNo: 'blueprintNo',
  serialId: 'serialId',
  reportName: 'reportName',
  amountComplete: 'amountComplete',
  amountNG: 'amountNG',
  timeHour: 'timeHour',
  reportType: 'reportType',
  status: 'status',
  reasonType: 'reasonType',
  reasonDetail: 'reasonDetail',
  reasonId: 'reasonId',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy'
};

exports.Prisma.ReportProcessScalarFieldEnum = {
  id: 'id',
  reportId: 'reportId',
  processNo: 'processNo',
  amountday: 'amountday'
};

exports.Prisma.ReportStockScalarFieldEnum = {
  id: 'id',
  reportProcessId: 'reportProcessId',
  stockId: 'stockId',
  stockamount: 'stockamount',
  stocktype: 'stocktype'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  Company: 'Company',
  CompanyBranch: 'CompanyBranch',
  Department: 'Department',
  Course: 'Course',
  UserCourseCompletion: 'UserCourseCompletion',
  courseType: 'courseType',
  Enrollment: 'Enrollment',
  Exam: 'Exam',
  Question: 'Question',
  Choice: 'Choice',
  ExamAttempt: 'ExamAttempt',
  UserAnswer: 'UserAnswer',
  OplDocument: 'OplDocument',
  File: 'File',
  Process: 'Process',
  ProcessDetail: 'ProcessDetail',
  ProcessBranch: 'ProcessBranch',
  ProcessMat: 'ProcessMat',
  ProcessBom: 'ProcessBom',
  Project: 'Project',
  ProjectDetail: 'ProjectDetail',
  ProjectBranch: 'ProjectBranch',
  ProjectMat: 'ProjectMat',
  ProjectBom: 'ProjectBom',
  ProjectResUser: 'ProjectResUser',
  CompanyHour: 'CompanyHour',
  Stock: 'Stock',
  ReasonStockNG: 'ReasonStockNG',
  ReasonTypeNG: 'ReasonTypeNG',
  ReasonDetail: 'ReasonDetail',
  Report: 'Report',
  ReportProcess: 'ReportProcess',
  ReportStock: 'ReportStock'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
